import { Model, Schema } from "mongoose"
import { ExtraEditMessageText, ExtraReplyMessage } from "telegraf/typings/telegram-types"
import { IUser, UserService } from "../../Controller/db"
import { MyContext } from "../../Model/Model"

export async function greeting(ctx: MyContext) {

    if (ctx.from) {
        let user: IUser | null | false = await UserService.GetUserById(ctx)

        if (user) {
            let message = `–í–∞—à ID: <code>${user.id}</code> \n–†–æ–ª—å: <code>${user.role}</code> \n–í–∞—à e-mail: <code>${user.email}</code>\n`;

            message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.date.registered} \n\n`;
            message += `–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫</b>, \n\n<b>–∏–ª–∏</b> –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /stop_search \n\n`
            message += `... –ò–¥—ë—Ç –ø–æ–∏—Å–∫ üîé`;

            const buyerExtraKeyboard: ExtraEditMessageText = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫',
                                callback_data: 'stop_search'
                            }
                        ]
                    ]
                }
            }

            await ctx.editMessageText(message, buyerExtraKeyboard)
            ctx.answerCbQuery()
            // ctx.wizard.next()
        }

    }
}